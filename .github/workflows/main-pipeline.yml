name: Java CI with Maven

on:
  workflow_dispatch:
    inputs:
      deploy-a:
        type: boolean
        description: 'Deploy to Server A?'
        required: true
        default: true
      deploy-b:
        type: boolean
        description: 'Deploy to Server B?'
        required: true
        default: true
        
  # push:
  #   branches: 
  #     - main-v2
  # pull_request: 
  #   branches: 
  #     - main-v2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -DskipTests clean package

    - uses: actions/upload-artifact@v4
      with:
        name: java-war-file
        path: target/spring-application-*.war

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0

    - name: Set up JDK 11 (required)
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Java-Practice-App-v2
        
  test:
    needs: ['build', 'code-quality']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven

    - name: Test with Maven
      run: mvn test

  deploy-A:
    if: github.ref == 'refs/heads/main-v2' && inputs.deploy-a
    environment: 
      name: production
      url: https://javaappv2.aws.melvincv.com
    needs: ['test']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: java-war-file
        path: target
        
    - name: Rename WAR File
      run: mv -v target/*.war ROOT.war

    - name: copy WAR file to Tomcat Webapps folder
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.HOST_A }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        source: "ROOT.war"
        target: "/tmp"

    - name: Copy ROOT.war to tomcat webapps folder
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.HOST_A }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          sudo rm -rf /var/lib/tomcat9/webapps/ROOT
          sudo cp -av /tmp/ROOT.war /var/lib/tomcat9/webapps/

  deploy-B:
    if: github.ref == 'refs/heads/main-v2' && inputs.deploy-b
    environment: 
      name: production
      url: https://javaappv2.aws.melvincv.com
    needs: ['test']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: java-war-file
        path: target
      
    - name: Rename WAR File
      run: mv -v target/*.war ROOT.war

    - name: copy WAR file to Tomcat Webapps folder
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.HOST_B }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        source: "ROOT.war"
        target: "/tmp"

    - name: Copy ROOT.war to tomcat webapps folder
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.HOST_B }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          sudo rm -rf /var/lib/tomcat9/webapps/ROOT
          sudo cp -av /tmp/ROOT.war /var/lib/tomcat9/webapps/

